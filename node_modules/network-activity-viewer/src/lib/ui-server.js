"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initUiServer = void 0;
const fs = require("fs");
const http = require("http");
const path = require("path");
const zlib = require("zlib");
const uiDir = path.normalize(__dirname + '../../../static/network-log-viewer');
function initUiServer(port = 4500) {
    http.createServer(requestHandler).listen(port);
}
exports.initUiServer = initUiServer;
function requestHandler(req, res) {
    res.setHeader('access-control-allow-origin', '*');
    const baseUrl = 'http://' + req.headers.host + '/';
    const decodedPathname = decodeURI(new URL(req.url, baseUrl).pathname);
    const pathname = path
        .normalize(decodedPathname)
        .replace(/^(\.\.(\/|\\|$))+/, '');
    if (!isRouteRequest(pathname)) {
        return serveStaticFile(res, pathname);
    }
    return serveIndexFile(res);
}
const isRouteRequest = (pathname) => pathname.split('/').pop().indexOf('.') === -1;
const utf8 = (file) => Buffer.from(file, 'binary').toString('utf8');
const serveStaticFile = (res, pathname) => {
    const uri = path.join(uiDir, pathname);
    const ext = uri.replace(/^.*[./\\]/, '').toLowerCase();
    if (!fs.existsSync(uri)) {
        console.log('File Not found ' + pathname);
        return sendError(res, 404);
    }
    fs.readFile(uri, 'binary', (err, file) => err ? sendError(res, 500) : sendFile(res, 200, file, ext));
};
const serveIndexFile = (res) => {
    const index = path.join(uiDir, 'index.html');
    fs.readFile(index, 'binary', (err, file) => {
        if (err) {
            return sendError(res, 500);
        }
        sendFile(res, 200, file, 'html');
    });
};
const sendFile = (res, status, file, ext, encoding = 'binary') => {
    var _a;
    if (['js', 'css', 'html', 'json', 'xml', 'svg'].includes(ext)) {
        res.setHeader('content-encoding', 'gzip');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        file = zlib.gzipSync(utf8(file));
        encoding = 'utf8';
    }
    res.writeHead(status, {
        'content-type': (_a = mimeTypes[ext]) !== null && _a !== void 0 ? _a : 'application/octet-stream',
    });
    res.write(file, encoding);
    res.end();
};
const sendError = (res, status) => {
    res.writeHead(status);
    res.write(`${status}`);
    res.end();
};
// the mime types required by the ui bundle
const mimeTypes = {
    js: 'application/javascript',
    css: 'text/css',
    html: 'text/html',
    txt: 'text/plain',
    ico: 'image/x-icon',
};
//# sourceMappingURL=ui-server.js.map