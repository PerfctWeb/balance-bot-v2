import { AxiosRequestConfig } from 'axios';
import { BasicAssetParam, BasicAssetPaginatedParams, BasicSymbolParam, BinanceBaseUrlKey, GetOrderParams, OrderBookParams, HistoricalTradesParams, KlinesParams, RecentTradesParams, CancelOrderParams, CancelOCOParams, GetAllOrdersParams, NewOCOParams, SymbolFromPaginatedRequestFromId, ExchangeSymbol } from './types/shared';
import { AllCoinsInformationResponse, DailyAccountSnapshotParams, DailyAccountSnapshot, DepositHistoryParams, SystemStatusResponse, WithdrawParams, DepositHistory, WithdrawHistoryParams, WithdrawHistory, DepositAddressResponse, ConvertDustParams, DepositAddressParams, BasicTimeRangeParam, UniversalTransferParams, SubAccountListParams, UniversalTransferHistoryParams, VirtualSubaccountParams, ExchangeInfoParams, NewSpotOrderParams, GetOCOParams, BasicFromPaginatedParams, APITradingStatus, AssetDetail, SymbolTradeFee, APIPermissions, ExchangeInfo, OrderBookResponse, RawTrade, AggregateTrade, CurrentAvgPrice, DailyChangeStatistic, SymbolPrice, SymbolOrderBookTicker, OrderResponseACK, OrderResponseResult, OrderResponseFull, CancelSpotOrderResult, SpotOrder, AccountInformation, RawAccountTrade, MarginAccountLoanParams, MarginTransactionResponse, CrossMarginAccountTransferParams, QueryMarginAssetParams, QueryMarginAssetResponse, QueryCrossMarginPairParams, QueryCrossMarginPairResponse, QueryMarginPriceIndexResponse, MarginRecordResponse, QueryMarginRecordParams, QueryCrossMarginAccountDetailsParams, QueryMaxBorrowResponse, BasicMarginAssetParams, QueryMaxTransferOutAmountResponse, IsolatedMarginAccountTransferParams } from './types/spot';
import { RestClientOptions } from './util/requestUtils';
import BaseRestClient from './util/BaseRestClient';
export declare class MainClient extends BaseRestClient {
    constructor(restClientOptions?: RestClientOptions, requestOptions?: AxiosRequestConfig);
    /**
     * Abstraction required by each client to aid with time sync / drift handling
     */
    getServerTime(baseUrlKeyOverride?: BinanceBaseUrlKey): Promise<number>;
    /**
     *
     * Wallet Endpoints
     *
    **/
    getSystemStatus(): Promise<SystemStatusResponse>;
    getBalances(): Promise<AllCoinsInformationResponse[]>;
    getDailyAccountSnapshot(params: DailyAccountSnapshotParams): Promise<DailyAccountSnapshot>;
    disableFastWithdrawSwitch(): Promise<{}>;
    enableFastWithdrawSwitch(): Promise<{}>;
    withdraw(params: WithdrawParams): Promise<{
        id: string;
    }>;
    getDepositHistory(params?: DepositHistoryParams): Promise<DepositHistory[]>;
    getWithdrawHistory(params?: WithdrawHistoryParams): Promise<WithdrawHistory[]>;
    getDepositAddress(params: DepositAddressParams): Promise<DepositAddressResponse>;
    getAccountStatus(): Promise<{
        data: string;
    }>;
    getDustLog(params?: BasicTimeRangeParam): Promise<any>;
    convertDustToBnb(params: ConvertDustParams): Promise<any>;
    getAssetDividendRecord(params?: BasicAssetPaginatedParams): Promise<any>;
    getAssetDetail(params?: Partial<BasicAssetParam>): Promise<Record<ExchangeSymbol, AssetDetail>>;
    getTradeFee(params?: Partial<BasicSymbolParam>): Promise<SymbolTradeFee[]>;
    submitUniversalTransfer(params: UniversalTransferParams): Promise<{
        tranId: number;
    }>;
    getUniversalTransferHistory(params: UniversalTransferHistoryParams): Promise<any>;
    getApiTradingStatus(): Promise<APITradingStatus>;
    getApiKeyPermissions(): Promise<APIPermissions>;
    /**
     *
     * Sub-Account Endpoints
     *
    **/
    createVirtualSubAccount(params: VirtualSubaccountParams): Promise<any>;
    getSubAccountList(params?: SubAccountListParams): Promise<any>;
    /**
     * Broker Endpoints
     */
    getBrokerIfNewSpotUser(): Promise<{
        rebateWorking: boolean;
        ifNewUser: boolean;
    }>;
    getBrokerUserCustomisedId(market: 'spot' | 'futures'): import("./util/requestUtils").GenericAPIResponse<any>;
    getBrokerSpotRebateHistory(days: 7 | 30, customerId?: string): import("./util/requestUtils").GenericAPIResponse<any> | undefined;
    /**
     *
     * Market Data Endpoints
     *
    **/
    testConnectivity(): Promise<{}>;
    getExchangeInfo(params?: ExchangeInfoParams): Promise<ExchangeInfo>;
    getOrderBook(params: OrderBookParams): Promise<OrderBookResponse>;
    getRecentTrades(params: RecentTradesParams): Promise<RawTrade[]>;
    getHistoricalTrades(params: HistoricalTradesParams): Promise<RawTrade[]>;
    getAggregateTrades(params: SymbolFromPaginatedRequestFromId): Promise<AggregateTrade[]>;
    getKlines(params: KlinesParams): Promise<any>;
    getAvgPrice(params: BasicSymbolParam): Promise<CurrentAvgPrice>;
    get24hrChangeStatististics(params?: Partial<BasicSymbolParam>): Promise<DailyChangeStatistic | DailyChangeStatistic[]>;
    getSymbolPriceTicker(params?: Partial<BasicSymbolParam>): Promise<SymbolPrice | SymbolPrice[]>;
    getSymbolOrderBookTicker(params?: Partial<BasicSymbolParam>): Promise<SymbolOrderBookTicker | SymbolOrderBookTicker[]>;
    /**
     *
     * Spot Account/Trade Endpoints
     *
    **/
    testNewOrder(params: NewSpotOrderParams): Promise<{}>;
    submitNewOrder(params: NewSpotOrderParams): Promise<OrderResponseACK | OrderResponseResult | OrderResponseFull>;
    cancelOrder(params: CancelOrderParams): Promise<CancelSpotOrderResult>;
    cancelAllSymbolOrders(params: BasicSymbolParam): Promise<CancelSpotOrderResult[]>;
    getOrder(params: GetOrderParams): Promise<SpotOrder>;
    getOpenOrders(params?: Partial<BasicSymbolParam>): Promise<SpotOrder[]>;
    getAllOrders(params: GetAllOrdersParams): Promise<SpotOrder[]>;
    submitNewOCO(params: NewOCOParams): Promise<any>;
    cancelOCO(params: CancelOCOParams): Promise<any>;
    getOCO(params?: GetOCOParams): Promise<any>;
    getAllOCO(params?: BasicFromPaginatedParams): Promise<any>;
    getAllOpenOCO(): Promise<any>;
    getAccountInformation(): Promise<AccountInformation>;
    getAccountTradeList(params: SymbolFromPaginatedRequestFromId): Promise<RawAccountTrade[]>;
    /**
     *
     * Margin Account/Trade Endpoints
     *
    **/
    crossMarginAccountTransfer(params: CrossMarginAccountTransferParams): Promise<MarginTransactionResponse>;
    marginAccountBorrow(params: MarginAccountLoanParams): Promise<MarginTransactionResponse>;
    marginAccountRepay(params: MarginAccountLoanParams): Promise<MarginTransactionResponse>;
    queryMarginAsset(params: QueryMarginAssetParams): Promise<QueryMarginAssetResponse>;
    queryCrossMarginPair(params: QueryCrossMarginPairParams): Promise<QueryCrossMarginPairResponse>;
    getAllMarginAssets(): Promise<QueryMarginAssetResponse[]>;
    getAllCrossMarginPairs(): Promise<QueryCrossMarginPairResponse[]>;
    queryMarginPriceIndex(params: BasicSymbolParam): Promise<QueryMarginPriceIndexResponse>;
    marginAccountNewOrder(params: NewSpotOrderParams): Promise<OrderResponseACK | OrderResponseResult | OrderResponseFull>;
    marginAccountCancelOrder(params: CancelOrderParams): Promise<CancelSpotOrderResult>;
    marginAccountCancelOpenOrders(params: BasicSymbolParam): Promise<CancelSpotOrderResult[]>;
    queryLoanRecord(params: QueryMarginRecordParams): Promise<MarginRecordResponse>;
    queryRepayRecord(params: QueryMarginRecordParams): Promise<MarginRecordResponse>;
    queryCrossMarginAccountDetails(): Promise<QueryCrossMarginAccountDetailsParams>;
    queryMarginAccountOrder(params: GetOrderParams): Promise<SpotOrder>;
    queryMarginAccountOpenOrders(params: BasicSymbolParam): Promise<SpotOrder[]>;
    queryMarginAccountAllOrders(params: GetAllOrdersParams): Promise<SpotOrder[]>;
    marginAccountNewOCO(params: NewOCOParams): Promise<any>;
    marginAccountCancelOCO(params: CancelOCOParams): Promise<any>;
    queryMarginAccountOCO(params: GetOCOParams): Promise<any>;
    queryMaxBorrow(params: BasicMarginAssetParams): Promise<QueryMaxBorrowResponse>;
    queryMaxTransferOutAmount(params: BasicMarginAssetParams): Promise<QueryMaxTransferOutAmountResponse>;
    isolatedMarginAccountTransfer(params: IsolatedMarginAccountTransferParams): Promise<MarginTransactionResponse>;
    /**
     *
     * User Data Stream Endpoints
     *
    **/
    getSpotUserDataListenKey(): Promise<{
        listenKey: string;
    }>;
    keepAliveSpotUserDataListenKey(listenKey: string): Promise<{}>;
    closeSpotUserDataListenKey(listenKey: string): Promise<{}>;
    getMarginUserDataListenKey(): Promise<{
        listenKey: string;
    }>;
    keepAliveMarginUserDataListenKey(listenKey: string): Promise<{}>;
    closeMarginUserDataListenKey(listenKey: string): Promise<{}>;
    getIsolatedMarginUserDataListenKey(params: {
        symbol: string;
    }): Promise<{
        listenKey: string;
    }>;
    keepAliveIsolatedMarginUserDataListenKey(params: {
        symbol: string;
        listenKey: string;
    }): Promise<{}>;
    closeIsolatedMarginUserDataListenKey(params: {
        symbol: string;
        listenKey: string;
    }): Promise<{}>;
    /**
     *
     * Savings Endpoints
     *
    **/
    /**
     *
     * Mining Endpoints
     *
    **/
    /**
     *
     * Futures Management Endpoints
     * Note: to trade futures use the usdm-client or coinm-client. The spot client only has the futures endpoints listed in the "spot" docs category
     *
    **/
    /**
     *
     * BLVT Endpoints
     *
    **/
    /**
     *
     * BSwap Endpoints
     *
    **/
    /**
     * Validate syntax meets requirements set by binance. Log warning if not.
     */
    private validateOrderId;
}
/**
 * @deprecated use MainClient instead of SpotClient (it is the same)
 */
export declare const SpotClient: typeof MainClient;
