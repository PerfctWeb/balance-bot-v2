"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAccountUpdateRaw = exports.isAccountConfigUpdateRaw = exports.isOrderTradeUpdateRaw = exports.isKlineRaw = exports.is24hrMiniTickerRaw = exports.isAll24hrMiniTickerRaw = exports.isWsFormattedFuturesUserDataEvent = exports.isWsFormattedSpotUserDataEvent = exports.isWsFormattedUserDataEvent = exports.isWsFormatted24hrTickerArray = exports.isWsFormatted24hrTicker = exports.isWsFormattedKline = exports.isWsFormattedMarkPriceUpdate = exports.isWsFormattedMarkPriceUpdateArray = exports.isWsFormattedMarkPriceUpdateEvent = void 0;
/*
  Use type guards to narrow down types with minimal efforts.
*/
function isWsFormattedMarkPriceUpdateEvent(data) {
    return !Array.isArray(data) && data.eventType === 'markPriceUpdate';
}
exports.isWsFormattedMarkPriceUpdateEvent = isWsFormattedMarkPriceUpdateEvent;
function isWsFormattedMarkPriceUpdateArray(data) {
    return (Array.isArray(data) &&
        data.length !== 0 &&
        isWsFormattedMarkPriceUpdateEvent(data[0]));
}
exports.isWsFormattedMarkPriceUpdateArray = isWsFormattedMarkPriceUpdateArray;
/** @deprecated, use isWsFormattedMarkPriceUpdateEvent or isWsFormattedMarkPriceUpdateArray */
function isWsFormattedMarkPriceUpdate(data) {
    return isWsFormattedMarkPriceUpdateArray(data);
}
exports.isWsFormattedMarkPriceUpdate = isWsFormattedMarkPriceUpdate;
function isWsFormattedKline(data) {
    return !Array.isArray(data) && data.eventType === 'kline';
}
exports.isWsFormattedKline = isWsFormattedKline;
function isWsFormatted24hrTicker(data) {
    return !Array.isArray(data) && data.eventType === '24hrTicker';
}
exports.isWsFormatted24hrTicker = isWsFormatted24hrTicker;
function isWsFormatted24hrTickerArray(data) {
    return (Array.isArray(data) && data.length !== 0 && isWsFormatted24hrTicker(data[0]));
}
exports.isWsFormatted24hrTickerArray = isWsFormatted24hrTickerArray;
function isWsFormattedUserDataEvent(data) {
    return !Array.isArray(data) && data.wsKey.includes('userData');
}
exports.isWsFormattedUserDataEvent = isWsFormattedUserDataEvent;
function isWsFormattedSpotUserDataEvent(data) {
    return isWsFormattedUserDataEvent(data) && data.wsMarket.includes('spot');
}
exports.isWsFormattedSpotUserDataEvent = isWsFormattedSpotUserDataEvent;
function isWsFormattedFuturesUserDataEvent(data) {
    return isWsFormattedUserDataEvent(data) && data.wsMarket.includes('usdm');
}
exports.isWsFormattedFuturesUserDataEvent = isWsFormattedFuturesUserDataEvent;
/**
 * Typeguard to validate all symbol 24hrMiniTicker raw event
 */
function isAll24hrMiniTickerRaw(data) {
    return Array.isArray(data) && data[0].e === '24hrMiniTicker';
}
exports.isAll24hrMiniTickerRaw = isAll24hrMiniTickerRaw;
/**
 * Typeguard to validate a single 24hrMiniTicker raw event
 */
function is24hrMiniTickerRaw(data) {
    return !Array.isArray(data) && data.e === '24hrMiniTicker';
}
exports.is24hrMiniTickerRaw = is24hrMiniTickerRaw;
/**
 * Typeguard to validate a single kline raw event
 */
function isKlineRaw(data) {
    return !Array.isArray(data) && data.e === 'kline';
}
exports.isKlineRaw = isKlineRaw;
/**
 * Typeguard to validate a single ORDER_TRADE_UPDATE raw event
 */
function isOrderTradeUpdateRaw(data) {
    return !Array.isArray(data) && data.e === 'ORDER_TRADE_UPDATE';
}
exports.isOrderTradeUpdateRaw = isOrderTradeUpdateRaw;
/**
 * Typeguard to validate a single ACCOUNT_CONFIG_UPDATE raw event
 */
function isAccountConfigUpdateRaw(data) {
    return !Array.isArray(data) && data.e === 'ACCOUNT_CONFIG_UPDATE';
}
exports.isAccountConfigUpdateRaw = isAccountConfigUpdateRaw;
/**
 * Typeguard to validate a single ACCOUNT_UPDATE raw event
 */
function isAccountUpdateRaw(data) {
    return !Array.isArray(data) && data.e === 'ACCOUNT_UPDATE';
}
exports.isAccountUpdateRaw = isAccountUpdateRaw;
//# sourceMappingURL=typeGuards.js.map