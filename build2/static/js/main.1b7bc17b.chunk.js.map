{"version":3,"sources":["components/BotCard.js","components/HtmlToolTip.js","services/LocalStoreService.js","context/UuidContext.js","context/SocketContext.js","context/ServerContext.js","context/MessageContext.js","context/ConfigurationContext.js","context/BotsContext.js","components/BotManager.js","components/Public.js","components/Switch.js","services/SocketService.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","cardHeader","backgroundColor","content","padding","spacing","LightTooltip","withStyles","tooltip","palette","common","white","color","boxShadow","shadows","fontSize","Tooltip","BotCard","props","classes","bot","mode","useState","headless","setHeadless","status","setStatus","live","setLive","statusMsg","setStatusMsg","useEffect","msg","style","toggleMode","newMode","callback","botID","toggleState","newStatus","Grid","item","xs","sm","md","container","direction","Box","className","Typography","gutterBottom","variant","component","ml","mr","botname","Button","onClick","disabled","title","size","HtmlTooltip","type","maxWidth","typography","pxToRem","border","useLocalStore","localStorageKey","defaultValue","React","localStorage","getItem","value","setValue","setItem","uuid","publicKey","crypt","Crypt","rsaStandard","encryptedUuid","timestamp","includes","encrypt","getTime","socket","socketio","auth","Date","ServerContext","createContext","ServerProvider","updated","serverversion","servertime","access","allow","reason","token","externalip","userid","server","setServer","Provider","children","MessageContext","MessageProvider","messages","setMessages","ConfigurationContext","ConfigurationProvider","configuration","setConfiguration","BotsContext","BotsProvider","bots","setBots","Copyright","height","p","align","Link","textDecoration","href","target","rel","getFullYear","CustomSwitch","checked","track","Switch","BotManager","setMode","badge","setBadge","useContext","validInstallation","useSnackbar","enqueueSnackbar","closeSnackbar","version","pckg2","openTT","setOpenTT","openTT2","setOpenTT2","openTT3","setOpenTT3","openBD","setOpenBD","open","setOpen","openUpdate","setOpenUpdate","outdated","setOutdated","deleteBot","setDeleteBot","input","setInput","menuState","setMenuState","currenttime","setCurrenttime","newtime","setNewtime","timeshift","setTimeshift","telegramToken","setTelegramToken","telegramUsername","setTelegramUsername","loginRequired","setLoginRequired","bbUsername","setBbUsername","bbPassword","setBbPassword","f2aRequired","setF2aRequired","whitelistEnabled","setWhitelistEnabled","whitelist","setWhitelist","temporaryAccessAllowed","setTemporaryAccessAllowed","telegramChatId","setTelegramChatId","newIP","setNewIP","flexWidthDown","setFlexWidthDown","flexWidthUp","setFlexWidthUp","update","setUpdate","lastMsg","setLastMsg","number","message","lock","dialog","setDialog","openDialog","setOpenDialog","setMaxWidth","checkIconColor","setcheckIconColor","latestVersion","setLatestVersion","bbv","cr","enc","Base64","parse","pckg","v","toString","Utf8","checkNow","useRef","lastRef","document","window","addEventListener","newVersion","newLast","current","newMessages","forEach","push","drawerWidth","Math","min","setSize","useLayoutEffect","updateSize","innerWidth","removeEventListener","WindowSize","inputWidth","root","display","logo","heroContent","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","flexDirection","cardContent","flexGrow","form","width","footer","bottomPush","position","bottom","backdrop","zIndex","drawer","appBar","flexShrink","drawerPaper","drawerContainer","overflow","button","marginLeft","textinput","createMuiTheme","StyledButton","action","key","Fragment","localhost","location","origin","mixpanel","init","host","identify","on","autoHideDuration","wdtDown","wdtUp","updateAvailable","newVer","oldVer","oldParts","split","newParts","i","length","a","b","isNewerVersion","checkForUpdate","getMessages","handleClose","handleUpdate","match","find","handleDelete","openUrl","botpath","currentUrl","replace","emit","handleDarkmode","e","handleUpdateOpen","handleUpdateClose","openDrawer","getHour","closeDrawer","handleCancel","handleDownload","axios","get","headers","tkn","responseType","then","res","fileDownload","data","catch","error","finally","shift","now","serverparsed","diffServerLocal","differenceInHours","addHours","getHours","padStart","getMinutes","adjusted","add","hours","onLoginRequired","onF2aRequired","onTemporaryAccessAllowed","normalizeIP","ipin","ip4","ip6","ipaddr","isValid","ip","kind","isIPv4MappedAddress","toIPv4Address","toIPv4MappedAddress","show","store","onLogout","handleTooltipClose","handleTooltipClose2","handleCloseDialog","last","parentElement","id","slice","setTimeout","bbvNew","bbvReceive","startsWith","alreadyUpdated","dialogWidth","textLength","newDialogMsg","ThemeProvider","Dialog","fullWidth","DialogContent","DialogContentText","DialogActions","reload","Backdrop","CircularProgress","DialogTitle","linkTarget","CssBaseline","AppBar","Toolbar","src","alt","alignItems","nowrap","zeroMinWidth","mt","noWrap","Hidden","xsDown","wdt","logout","smUp","Drawer","anchor","onClose","paper","Alert","severity","ClickAwayListener","onClickAway","interactive","m","disableFocusListener","disableHoverListener","disableTouchListener","IconButton","FormControl","InputLabel","Select","labelId","onChange","MenuItem","FormHelperText","TextField","name","label","helperText","autoComplete","pl","FormControlLabel","control","Checkbox","bgcolor","newWhitelist","List","dense","map","ListItem","ListItemText","primary","ListItemSecondaryAction","edge","disableFocusRipple","disableRipple","filter","deleteIP","justify","test","Fab","ipRegex","v4","exact","v6","newConfig","encryptedInput","handleConfirmedSave","Divider","background","Container","paragraph","mb","labelPlacement","autoFocus","margin","FlexToolbar","Chip","Badge","badgeContent","Public","loginNow","setLoginNow","accessMsg","setAccessMsg","serverDown","setServerDown","usernameProvided","setUsernameProvided","username","setUsername","password","setPassword","user","result","pathname","getUsername","handleRefresh","onLoginInput","required","goPublic","setGoPublic","SocketService","pubKey","setPubKey","setUuid","undefined","prevState","uuidv4","config","disconnect","App","maxSnack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b7bc17b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FontDownloadIcon from '@material-ui/icons/FontDownload';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardHeader: {\r\n        backgroundColor: '#000',\r\n    },\r\n    content: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst LightTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n        backgroundColor: theme.palette.common.white,\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 12,\r\n    },\r\n}))(Tooltip);\r\n\r\nexport default function BotCard(props) {\r\n    const classes = useStyles();\r\n    const bot = props.bot;\r\n    const mode = props.mode;\r\n\r\n    const [headless, setHeadless] = useState(bot.mode === 'auto');\r\n    const [status, setStatus] = useState(bot.status);\r\n    const [live, setLive] = useState('');\r\n    const [statusMsg, setStatusMsg] = useState(bot.status);\r\n\r\n    useEffect(() => {\r\n        let msg;\r\n\r\n        setStatus(bot.status);\r\n        setLive(bot.live);\r\n        setHeadless(bot.mode === 'auto');\r\n\r\n        msg = (bot.status === 'new') ? 'new' :\r\n            (bot.status === 'new-disabled') ? 'disabled' :\r\n            (bot.status === 'disabled') ? 'disabled' :\r\n            (bot.live === '') ? 'enabled' :\r\n            (bot.live === 'stopped') ? <span><span>{bot.status} / </span><span style={{ color: '#f00' }}>stopped</span></span> : 'enabled / running';\r\n\r\n        setStatusMsg(msg);\r\n        \r\n        return () => {\r\n        }\r\n    }, [bot]);\r\n\r\n    const toggleMode = () => {\r\n        let newMode = !headless;\r\n\r\n        setHeadless(newMode);\r\n\r\n        props.callback(bot.botID, 'headless', newMode);\r\n    }\r\n\r\n    const toggleState = () => {\r\n        let newStatus;\r\n\r\n        if (status === 'enabled') newStatus = 'disabled';\r\n        else if (status === 'new') newStatus = 'new-disabled';\r\n        else if (status === 'new-disabled') newStatus = 'new';\r\n        else if (status === 'disabled') newStatus = 'enabled';\r\n\r\n        setStatus(newStatus);\r\n        setLive('');\r\n\r\n        props.callback(bot.botID, 'status', newStatus);\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.callback(bot.botID, 'delete');\r\n    }\r\n\r\n    const goDashboard = () => {\r\n        props.callback(bot.botID, 'dashboard');\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4}>\r\n            <Paper>\r\n                <Grid container direction=\"row\">\r\n                    <Grid item xs={12}>\r\n                        <Box className={classes.cardHeader}>\r\n                            <Typography gutterBottom variant=\"button\" component=\"h2\">\r\n                                <Box color=\"#FFF\" ml={2} mr={2}>{bot.botname}</Box>\r\n                            </Typography>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.content}>\r\n                        <Typography variant=\"button\">\r\n                            <div>Bot ID: <b>{bot.botID}</b></div>\r\n                            <div><span>Status: <b>{statusMsg}</b></span></div>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container direction=\"row\" className={classes.content}>\r\n                    <Grid item xs={4}>\r\n                        <Button variant=\"contained\" onClick={goDashboard} disabled={status === 'disabled' || live !== 'running'}>\r\n                            Dashboard\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={2}></Grid>\r\n                    {(status === 'new' || status === 'new-disabled') ? (\r\n                        <Grid item xs={2}></Grid>\r\n                    ): (\r\n                        <Grid item xs={2}>\r\n                            {(headless) ? (\r\n                                <LightTooltip title=\"Switch to manual mode\">\r\n                                    <Button size=\"small\" color=\"primary\" onClick={toggleMode}>\r\n                                        <FontDownloadIcon color={(mode === 'light') ? \"primary\" : \"secondary\"} />\r\n                                    </Button>\r\n                                </LightTooltip>\r\n                            ) : (\r\n                                <LightTooltip title=\"Switch to automatic mode\">  \r\n                                    <Button size=\"small\" color=\"primary\" onClick={toggleMode}>\r\n                                        <FontDownloadIcon color=\"disabled\" />\r\n                                    </Button>\r\n                                </LightTooltip>\r\n                            )}\r\n                        </Grid>\r\n                    )}\r\n                    <Grid item xs={2}>\r\n                        {(status === 'disabled' || status === 'new-disabled') ? (\r\n                            <LightTooltip title=\"Start bot\">\r\n                                <Button size=\"small\" color=\"primary\" onClick={toggleState}>\r\n                                    <PowerSettingsNewIcon color=\"disabled\" />\r\n                                </Button>\r\n                            </LightTooltip>\r\n                        ) : (\r\n                            <LightTooltip title=\"Stop bot\">\r\n                                <Button size=\"small\" color=\"primary\" onClick={toggleState}>\r\n                                    <PowerSettingsNewIcon color={(mode === 'light') ? \"primary\" : \"secondary\"} />\r\n                                </Button>\r\n                            </LightTooltip>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <LightTooltip title=\"Delete bot\">\r\n                            <Button size=\"small\" color={(mode === 'light') ? \"primary\" : \"secondary\"} onClick={handleDelete}>\r\n                                <DeleteIcon />\r\n                            </Button>\r\n                        </LightTooltip>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}","import { withStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport const HtmlTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n        backgroundColor: (theme.palette.type === 'light') ? \"#FFFFFF\" : \"#000000\",\r\n        color: (theme.palette.type === 'light') ? \"#000000\" : \"#FFFFFF\",\r\n        maxWidth: 800,\r\n        fontSize: theme.typography.pxToRem(14),\r\n        border: '1px solid #888888',\r\n    },\r\n}))(Tooltip);","import React from 'react';\r\n\r\nexport const useLocalStore = (localStorageKey, defaultValue) => {\r\n  const [value, setValue] = React.useState(\r\n    localStorage.getItem(localStorageKey) || defaultValue\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(localStorageKey, value);\r\n  }, [value]);\r\n\r\n  return [value, setValue];\r\n};","import { Crypt } from 'hybrid-crypto-js';\r\n\r\nconst uuid = localStorage.getItem('uuid');\r\nconst publicKey = localStorage.getItem('publicKey');\r\n\r\nlet crypt = new Crypt({\r\n    md: 'sha256',\r\n    rsaStandard: 'RSA-OAEP',\r\n});\r\n\r\nexport const encryptedUuid = (timestamp) => {\r\n    if (uuid && publicKey && publicKey.includes('-----BEGIN PUBLIC KEY-----')) return crypt.encrypt(publicKey, `${uuid}@${timestamp.getTime()}`);\r\n    else return false;\r\n}","import socketio from \"socket.io-client\";\r\nimport { encryptedUuid } from '../context/UuidContext';\r\n\r\nexport const socket = socketio('/', {\r\n    auth: {\r\n        encryptedUuid: encryptedUuid(new Date())\r\n    }\r\n});","import React, { useState, createContext } from 'react';\r\n\r\nexport const ServerContext = createContext();\r\n\r\nexport const ServerProvider = (props) => {\r\n    const [server, setServer] = useState({\r\n        status: 'disconnected',\r\n        updated: '---',\r\n        serverversion: '0.0',\r\n        servertime: '---',\r\n        access: { allow: false, reason: 'initial state', token: null },\r\n        externalip: '',\r\n        publicKey: '',\r\n        userid: null,\r\n    });\r\n\r\n    return (\r\n        <ServerContext.Provider value={[server, setServer]}>\r\n            {props.children}\r\n        </ServerContext.Provider>\r\n    )\r\n}","import React, { useState, createContext } from 'react';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = (props) => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    return (\r\n        <MessageContext.Provider value={[messages, setMessages]}>\r\n            {props.children}\r\n        </MessageContext.Provider>\r\n    )\r\n}","import React, { useState, createContext } from 'react';\r\n\r\nexport const ConfigurationContext = createContext();\r\n\r\nexport const ConfigurationProvider = (props) => {\r\n    const [configuration, setConfiguration] = useState({});\r\n\r\n    return (\r\n        <ConfigurationContext.Provider value={[configuration, setConfiguration]}>\r\n            {props.children}\r\n        </ConfigurationContext.Provider>\r\n    )\r\n}","import React, { useState, createContext } from 'react';\r\n\r\nexport const BotsContext = createContext();\r\n\r\nexport const BotsProvider = (props) => {\r\n    const [bots, setBots] = useState(null);\r\n\r\n    return (\r\n        <BotsContext.Provider value={[bots, setBots]}>\r\n            {props.children}\r\n        </BotsContext.Provider>\r\n    )\r\n}","import React, { useContext, useState, useEffect, useLayoutEffect, useRef } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport BotCard from './BotCard';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport { HtmlTooltip } from './HtmlToolTip';\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { createMuiTheme, Divider } from \"@material-ui/core\";\r\nimport { useLocalStore } from \"../services/LocalStoreService\";\r\nimport { socket } from '../context/SocketContext';\r\nimport { ServerContext } from '../context/ServerContext';\r\nimport { MessageContext } from '../context/MessageContext';\r\nimport { ConfigurationContext } from '../context/ConfigurationContext';\r\nimport { BotsContext } from '../context/BotsContext';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport differenceInHours from 'date-fns/differenceInHours';\r\nimport addHours from 'date-fns/addHours';\r\nimport { add } from 'date-fns'\r\nimport parse from 'date-fns/parse';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { useSnackbar } from 'notistack';\r\nimport ipRegex from 'ip-regex';\r\nimport ipaddr from 'ipaddr.js';\r\nimport { Crypt } from 'hybrid-crypto-js';\r\nimport pckg from '../version.json';\r\nimport pckg2 from '../version2.json';\r\nimport cr from 'crypto-js';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport mixpanel from 'mixpanel-browser';\r\nimport { encryptedUuid } from '../context/UuidContext';\r\nimport axios from 'axios';\r\nimport fileDownload from 'js-file-download';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Box color=\"#FFF\" height={54} p={2}>\r\n            <Typography variant=\"body2\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link style={{ color: '#ffffff', textDecoration: 'none' }} href=\"https://hodlerhacks.com/\" target=\"_blank\" rel=\"noopener\">\r\n                    hodlerhacks.com\r\n                </Link>{' '}\r\n                {new Date().getFullYear()}\r\n            </Typography>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst CustomSwitch = withStyles({\r\n    checked: {\r\n    },\r\n    track: {\r\n        backgroundColor: '#999',\r\n    },\r\n})(Switch);\r\n\r\nconst LightTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n        backgroundColor: theme.palette.common.white,\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 12,\r\n    },\r\n}))(Tooltip);\r\n\r\nexport default function BotManager() {\r\n    const [mode, setMode] = useLocalStore('mode', 'light');\r\n    const [badge, setBadge] = useLocalStore('badge', 'false');\r\n\r\n    const [{ status, serverversion, servertime, access, externalip, publicKey, userid, validInstallation }, setServer] = useContext(ServerContext);\r\n    const [messages, setMessages] = useContext(MessageContext);\r\n    const [configuration, setConfiguration] = useContext(ConfigurationContext);\r\n    const [bots, setBots] = useContext(BotsContext);\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n    const version = pckg2.version;\r\n\r\n    const [openTT, setOpenTT] = useState(false);\r\n    const [openTT2, setOpenTT2] = useState(false);\r\n    const [openTT3, setOpenTT3] = useState(false);\r\n    const [openBD, setOpenBD] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n    const [openUpdate, setOpenUpdate] = useState(false);\r\n    const [outdated, setOutdated] = useState(false);\r\n    const [deleteBot, setDeleteBot] = useState({});\r\n    const [input, setInput] = useState('');\r\n    const [menuState, setMenuState] = useState(false);\r\n    const [currenttime, setCurrenttime] = useState();\r\n    const [newtime, setNewtime] = useState();\r\n    const [timeshift, setTimeshift] = useState(configuration.timeshift || '0');\r\n    const [telegramToken, setTelegramToken] = useState(configuration.telegramToken || '');\r\n    const [telegramUsername, setTelegramUsername] = useState(configuration.telegramUsername || '');\r\n    const [loginRequired, setLoginRequired] = useState(configuration.loginRequired || false);\r\n    const [bbUsername, setBbUsername] = useState(configuration.bbUsername || '');\r\n    const [bbPassword, setBbPassword] = useState(configuration.bbPassword || '');\r\n    const [f2aRequired, setF2aRequired] = useState(configuration.f2aRequired || false);\r\n    const [whitelistEnabled, setWhitelistEnabled] = useState(configuration.whitelistEnabled || false);\r\n    const [whitelist, setWhitelist] = useState(configuration.whitelist || []);\r\n    const [temporaryAccessAllowed, setTemporaryAccessAllowed] = useState(configuration.temporaryAccessAllowed || false);\r\n    const [telegramChatId, setTelegramChatId] = useState(configuration.telegramChatId || null);\r\n    const [newIP, setNewIP] = useState('');\r\n    const [flexWidthDown, setFlexWidthDown] = useState(0);\r\n    const [flexWidthUp, setFlexWidthUp] = useState(0);\r\n    const [update, setUpdate] = useState(false);\r\n    const [lastMsg, setLastMsg] = useLocalStore('last-msg', 0);\r\n    const [dialog, setDialog] = useState({ number: 0, title: '', message: '', lock: false });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [maxWidth, setMaxWidth] = useState('sm');\r\n    const [checkIconColor, setcheckIconColor] = useState('#fff');\r\n    const [latestVersion, setLatestVersion] = useLocalStore('latest-version', version) || '0.0.0';\r\n    const dv = cr.enc.Base64.parse(pckg.v).toString(cr.enc.Utf8);\r\n    const bbv = dv;\r\n    const checkNow = useRef(false);\r\n    const lastRef = useRef(lastMsg);\r\n\r\n    let crypt = new Crypt({\r\n        md: 'sha256',\r\n        rsaStandard: 'RSA-OAEP',\r\n    });\r\n\r\n    useEffect(() => {\r\n        document.title = `BB | Bot Manager`;\r\n\r\n        // Listen to local store changes (when changed on another page)\r\n        window.addEventListener('storage', () => {\r\n            const newMode = localStorage.getItem('mode');\r\n            setMode(newMode);\r\n\r\n            const newVersion = localStorage.getItem('latest-version');\r\n            setLatestVersion(newVersion);\r\n\r\n            const newLast = localStorage.getItem('last-msg');\r\n\r\n            if (newLast !== lastRef.current) {\r\n                lastRef.current = newLast;\r\n\r\n                let newMessages = [];\r\n\r\n                // Only keep messages that haven't been shown yet (on any page)\r\n                messages.forEach(msg => {\r\n                    if (msg.number > newLast) newMessages.push(msg);\r\n                });\r\n\r\n                setMessages(newMessages);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeshift(configuration.timeshift || '0');\r\n        setTelegramToken(configuration.telegramToken || '');\r\n        setTelegramUsername(configuration.telegramUsername || '');\r\n        setWhitelistEnabled(configuration.whitelistEnabled || false);\r\n        setLoginRequired(configuration.loginRequired || false);\r\n        setBbUsername(configuration.bbUsername || '');\r\n        setBbPassword(configuration.bbPassword || '');\r\n        setF2aRequired(configuration.f2aRequired || false);\r\n        setWhitelist(configuration.whitelist || []);\r\n        setTemporaryAccessAllowed(configuration.temporaryAccessAllowed || false);\r\n        setTelegramChatId(configuration.telegramChatId);\r\n\r\n        // Show badge if access is restricted in any way, but Telegram bot is not configured\r\n        if ((configuration.loginRequired || configuration.temporaryAccessAllowed) && (configuration.telegramToken === '' || configuration.telegramUsername === '' || !configuration.telegramChatId)) {\r\n            setBadge('true');\r\n        } else {\r\n            setBadge('false');\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, [configuration]);\r\n\r\n    const WindowSize = () => {\r\n        const [size, setSize] = useState(0);\r\n        useLayoutEffect(() => {\r\n            function updateSize() {\r\n                setSize(window.innerWidth);\r\n            }\r\n            window.addEventListener('resize', updateSize);\r\n            updateSize();\r\n            return () => window.removeEventListener('resize', updateSize);\r\n        }, []);\r\n        return size;\r\n    }\r\n\r\n    const drawerWidth = Math.min(480, WindowSize());\r\n    const inputWidth = drawerWidth - 50;\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        logo: {\r\n            maxWidth: 60,\r\n            padding: 10,\r\n        },\r\n        heroContent: {\r\n            backgroundColor: (mode === 'light') ? '#fff' : '#000',\r\n            padding: theme.spacing(4, 0, 2),\r\n        },\r\n        heroButtons: {\r\n            marginTop: theme.spacing(4),\r\n        },\r\n        cardGrid: {\r\n            paddingTop: theme.spacing(6),\r\n            paddingBottom: theme.spacing(6),\r\n        },\r\n        card: {\r\n            height: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        cardHeader: {\r\n            backgroundColor: '#000',\r\n        },\r\n        cardContent: {\r\n            flexGrow: 1,\r\n        },\r\n        form: {\r\n            width: '100%', // Fix IE 11 issue.\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        footer: {\r\n            marginTop: 'auto',\r\n            backgroundColor: '#000000',\r\n        },\r\n        bottomPush: {\r\n            position: \"fixed\",\r\n            width: '100%',\r\n            bottom: 0,\r\n            paddingBottom: 0,\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 2,\r\n            color: '#fff',\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        },\r\n        drawer: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        drawerContainer: {\r\n            overflow: 'auto',\r\n        },\r\n        button: {\r\n            marginTop: theme.spacing(3),\r\n            marginLeft: theme.spacing(1),\r\n            width: '80px',\r\n        },\r\n        textinput: {\r\n            width: inputWidth,\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAddBot = () => {\r\n        setOpenBD(true);\r\n        if (socket) socket.emit(\"add-bot\", access.token);\r\n    }\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: mode\r\n        }\r\n    });\r\n\r\n    const StyledButton = withStyles({\r\n        root: {\r\n            '&:hover': {\r\n                backgroundColor: 'transparent',\r\n            },\r\n            '&:click': {\r\n                backgroundColor: '#f00',\r\n            },\r\n        },\r\n    })(Button);\r\n\r\n    useEffect(() => {\r\n        const outdated = (serverversion && (serverversion !== '0.0' && serverversion !== version));\r\n        setOutdated(outdated);\r\n\r\n        return () => {\r\n        }\r\n    }, [serverversion]);\r\n\r\n    const action = key => (\r\n        <React.Fragment>\r\n            <Button\r\n                style={{\r\n                    color: '#bbbbbb',\r\n                }}\r\n                onClick={() => { closeSnackbar(key) }}>\r\n                Dismiss\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n\r\n    useEffect(() => {\r\n        const url = window.location.origin;\r\n        const localhost = url.includes('localhost');\r\n\r\n        // Mixpanel\r\n        if (userid) {\r\n            mixpanel.init('6b67f3d61ee94b8f5c80b4affef4c4d9',\r\n                {\r\n                    host: \"api-eu.mixpanel.com\",\r\n                });\r\n            mixpanel.identify(userid);\r\n            mixpanel.track('Bot Manager', {\r\n                'localhost': localhost,\r\n            });\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, [userid]);\r\n\r\n    useEffect(() => {\r\n        if (bots !== null) setOpenBD(false);\r\n\r\n        return () => {\r\n        }\r\n    }, [bots]);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"notification\", (msg) => {\r\n            enqueueSnackbar(msg, {\r\n                variant: 'error',\r\n                autoHideDuration: 8000,\r\n                action,\r\n            });\r\n        });\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    const isNewerVersion = (newVer, oldVer) => {\r\n        const oldParts = oldVer.split('.')\r\n        const newParts = newVer.split('.')\r\n        for (var i = 0; i < newParts.length; i++) {\r\n            const a = ~~newParts[i] // parse int\r\n            const b = ~~oldParts[i] // parse int\r\n            if (a > b) return true\r\n            if (a < b) return false\r\n        }\r\n        return false\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Start with 50 to accomodate for the settings icon\r\n        let wdtDown = 50;\r\n        let wdtUp = 50;\r\n        const updateAvailable = isNewerVersion(latestVersion, version);\r\n\r\n        setUpdate(updateAvailable);\r\n        const logout = access && access.token;\r\n\r\n        if (updateAvailable) {\r\n            wdtDown += 140;\r\n        } else {\r\n            wdtDown += 40;\r\n        }\r\n        if (logout) {\r\n            wdtDown += 50;\r\n            wdtUp += 50;\r\n        }\r\n\r\n        setFlexWidthDown(wdtDown);\r\n        setFlexWidthUp(wdtUp);\r\n\r\n        return () => {\r\n        }\r\n    }, [latestVersion, version, access]);\r\n\r\n    const handleDelete = (botID) => {\r\n        let match = bots.find(b => b.botID === botID);\r\n        setDeleteBot({\r\n            botID: botID,\r\n            botname: match.botname,\r\n        });\r\n        setInput('');\r\n        setOpen(true);\r\n    };\r\n\r\n    const confirmDelete = (e) => {\r\n        if (input === deleteBot.botname) {\r\n            setOpen(false);\r\n            if (socket) socket.emit(\"delete-bot\", deleteBot.botID, access.token);\r\n        }\r\n    }\r\n\r\n    const checkForUpdate = () => {\r\n        checkNow.current = true;\r\n        getMessages();\r\n    }\r\n\r\n    const onInput = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleUpdate = (botID, action, update) => {\r\n        if (action === 'delete') handleDelete(botID);\r\n        else if (action === 'dashboard') {\r\n            const botpath = `bot${botID}`;\r\n            let currentUrl = window.location.href;\r\n            let openUrl;\r\n            if (currentUrl.includes(':5000')) currentUrl = currentUrl.replace(':5000', ':4000'); // For development only\r\n            openUrl = currentUrl + botpath;\r\n            window.open(openUrl, '_blank', 'noopener');\r\n        } else if (action === 'status') {\r\n            let match = bots.find(b => b.botID === botID);\r\n            match.status = update;\r\n            match.live = 'stopped';\r\n            if (socket) {\r\n                socket.emit(\"update-bot\", match, access.token);\r\n                setBots(bots);\r\n            }\r\n        } else if (action === 'headless') {\r\n            if (socket) {\r\n                socket.emit(\"toggle-bot-mode\", botID, access.token);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleDarkmode = (e) => {\r\n        (mode === 'light') ? setMode('dark') : setMode('light');\r\n    }\r\n\r\n    const handleUpdateOpen = () => {\r\n        setOpenUpdate(true);\r\n    }\r\n\r\n    const confirmBbUpdate = () => {\r\n        setOpenUpdate(false);\r\n\r\n        if (socket) socket.emit(\"update-bb\", access.token);\r\n    }\r\n\r\n    const handleUpdateClose = () => {\r\n        setOpenUpdate(false);\r\n    }\r\n\r\n    const openDrawer = () => {\r\n        // Update current and server times\r\n        setCurrenttime(getHour(timeshift)[0]);\r\n        setNewtime(getHour(timeshift)[1]);\r\n\r\n        setMenuState(true);\r\n    };\r\n\r\n    const closeDrawer = () => {\r\n        setMenuState(false);\r\n    };\r\n\r\n    const handleConfirmedSave = () => {\r\n        if (loginRequired && (bbUsername === '' || bbPassword === '')) {\r\n            enqueueSnackbar('Please enter a username and password', {\r\n                variant: 'error',\r\n                autoHideDuration: 8000,\r\n                action,\r\n            });\r\n            return;\r\n        }\r\n\r\n        const newConfig = {\r\n            timeshift: timeshift,\r\n            telegramToken: telegramToken,\r\n            telegramUsername: telegramUsername,\r\n            loginRequired: loginRequired,\r\n            bbUsername: bbUsername,\r\n            bbPassword: bbPassword,\r\n            f2aRequired: f2aRequired,\r\n            whitelistEnabled: whitelistEnabled,\r\n            whitelist: whitelist,\r\n            temporaryAccessAllowed: temporaryAccessAllowed,\r\n            telegramChatId: telegramChatId,\r\n        };\r\n\r\n        const timestamp = new Date().getTime();\r\n\r\n        let encryptedInput = newConfig;\r\n\r\n        if (bbPassword !== '************') {\r\n            if (bbPassword !== '') {\r\n                encryptedInput = {\r\n                    ...encryptedInput,\r\n                    bbPassword: crypt.encrypt(publicKey, `${bbPassword}@${timestamp}`),\r\n                }\r\n            } else {\r\n                encryptedInput = {\r\n                    ...encryptedInput,\r\n                    bbPassword: '',\r\n                }\r\n            }\r\n        }\r\n\r\n        if (telegramToken !== '************') {\r\n            if (telegramToken !== '') {\r\n                encryptedInput = {\r\n                    ...encryptedInput,\r\n                    telegramToken: crypt.encrypt(publicKey, `${telegramToken}@${timestamp}`),\r\n                }\r\n            } else {\r\n                encryptedInput = {\r\n                    ...encryptedInput,\r\n                    telegramToken: '',\r\n                }\r\n            }\r\n        }\r\n\r\n        if (socket) socket.emit(\"store-settings\", encryptedInput, access.token);\r\n\r\n        if (newConfig.telegramToken !== '') newConfig.telegramToken = '************';\r\n        if (newConfig.bbPassword !== '') newConfig.bbPassword = '************';\r\n\r\n        setConfiguration(newConfig);\r\n\r\n        closeDrawer();\r\n    }\r\n\r\n    const handleSave = () => {\r\n        // Check if the Telegram bot has been setup properly\r\n        const telegramApprovalEnabled =\r\n            (f2aRequired === true && configuration.f2aRequired === false) ||\r\n            (temporaryAccessAllowed === true && configuration.temporaryAccessAllowed === false);\r\n\r\n        if (telegramApprovalEnabled && !telegramChatId) {\r\n            enqueueSnackbar('Set up your Telegram bot and try again', {\r\n                variant: 'error',\r\n                autoHideDuration: 8000,\r\n                action,\r\n            });\r\n        } else {\r\n            handleConfirmedSave();\r\n        }\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setTimeshift(configuration.timeshift);\r\n        setTelegramToken(configuration.telegramToken);\r\n        setTelegramUsername(configuration.telegramUsername);\r\n        setLoginRequired(configuration.loginRequired);\r\n        setBbUsername(configuration.bbUsername);\r\n        setBbPassword(configuration.bbPassword);\r\n        setF2aRequired(configuration.f2aRequired);\r\n        setWhitelistEnabled(configuration.whitelistEnabled);\r\n        setWhitelist(configuration.whitelist);\r\n        setTemporaryAccessAllowed(configuration.temporaryAccessAllowed);\r\n\r\n        closeDrawer();\r\n    }\r\n\r\n    const handleRefresh = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleDownload = (type) => {\r\n        axios.get(`/download/${type}`, {\r\n            headers: {\r\n                uuid: encryptedUuid(new Date()),\r\n                tkn: access.token,\r\n            },\r\n            responseType: 'blob',\r\n        })\r\n            .then(function (res) {\r\n                fileDownload(res.data, `${type}.zip`);\r\n            })\r\n            .catch(function (error) {\r\n            })\r\n            .finally(function () {\r\n                // always executed\r\n            });\r\n    }\r\n\r\n    const getHour = (shift) => {\r\n        const now = new Date();\r\n        const serverparsed = parse(servertime, 'yyyy/MM/dd HH:mm:ss', new Date());\r\n        const diffServerLocal = differenceInHours(serverparsed, now);\r\n        const server = addHours(now, diffServerLocal);\r\n        const current = server.getHours().toString().padStart(2, '0') + \":\" + server.getMinutes().toString().padStart(2, '0');\r\n        let adjusted = server;\r\n        if (shift !== 0) adjusted = add(server, { hours: shift });\r\n\r\n        const newt = adjusted.getHours().toString().padStart(2, '0') + \":\" + adjusted.getMinutes().toString().padStart(2, '0');\r\n        return [current, newt];\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrenttime(getHour(timeshift)[0]);\r\n        setNewtime(getHour(timeshift)[1]);\r\n\r\n        return () => {\r\n        }\r\n    }, [servertime, timeshift]);\r\n\r\n    const onTimeshift = (e) => {\r\n        setTimeshift(e.target.value);\r\n        setNewtime(getHour(e.target.value)[1]);\r\n    }\r\n\r\n    const onTelegramToken = (e) => {\r\n        setTelegramToken(e.target.value);\r\n    }\r\n\r\n    const onTelegramUsername = (e) => {\r\n        setTelegramUsername(e.target.value);\r\n    }\r\n\r\n    const onLoginRequired = (e) => {\r\n        setLoginRequired(e.target.checked);\r\n    }\r\n\r\n    const onBbUsername = (e) => {\r\n        setBbUsername(e.target.value);\r\n    }\r\n\r\n    const onBbPassword = (e) => {\r\n        setBbPassword(e.target.value);\r\n    }\r\n\r\n    const onF2aRequired = (e) => {\r\n        setF2aRequired(e.target.checked);\r\n    }\r\n\r\n    const onWhitelistEnabled = (e) => {\r\n        // When enabled, make sure current IP address is on the whitelist\r\n        if (e.target.checked && !whitelist.includes(normalizeIP(externalip).store)) {\r\n            let newWhitelist = whitelist;\r\n            newWhitelist.push(normalizeIP(externalip).store);\r\n            setWhitelist(newWhitelist);\r\n        }\r\n\r\n        setWhitelistEnabled(e.target.checked);\r\n    }\r\n\r\n    const onTemporaryAccessAllowed = (e) => {\r\n        setTemporaryAccessAllowed(e.target.checked);\r\n    }\r\n\r\n    const onNewIP = (e) => {\r\n        if (/^[0-9,a-f,.,:]*$/.test(e.target.value)) setNewIP(e.target.value);\r\n    }\r\n\r\n    const addIP = () => {\r\n        if (whitelist.includes(normalizeIP(newIP).store)) {\r\n            enqueueSnackbar('IP address already whitelisted', {\r\n                variant: 'error',\r\n                autoHideDuration: 8000,\r\n                action,\r\n            });\r\n        } else if (ipRegex.v4({ exact: true }).test(newIP) || ipRegex.v6({ exact: true }).test(newIP)) {\r\n            let newWhitelist = whitelist;\r\n            newWhitelist.push(normalizeIP(newIP).store);\r\n            setNewIP('');\r\n            setWhitelist(newWhitelist);\r\n        } else {\r\n            enqueueSnackbar('Invalid IP address', {\r\n                variant: 'error',\r\n                autoHideDuration: 8000,\r\n                action,\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteIP = (ip) => {\r\n        let newWhitelist = whitelist;\r\n        newWhitelist = newWhitelist.filter(item => item !== ip)\r\n        setWhitelist(newWhitelist);\r\n    }\r\n\r\n    const normalizeIP = (ipin) => {\r\n        let ip4 = null;\r\n        let ip6 = null;\r\n        if (ipaddr.isValid(ipin)) {\r\n            const ip = ipaddr.parse(ipin);\r\n            if (ip.kind() === 'ipv6') {\r\n                if (ip.isIPv4MappedAddress()) {\r\n                    ip4 = ip.toIPv4Address().toString();\r\n                }\r\n                ip6 = ip.toString();\r\n            } else {\r\n                ip4 = ip.toString();\r\n                ip6 = ip.toIPv4MappedAddress().toString();\r\n            }\r\n        }\r\n        // Show ip4 to the user whenever possible, otherwise ip6\r\n        // Always store ip6, and use that to check client ip versus whitelist\r\n        return {\r\n            show: ip4 ? ip4 : ip6,\r\n            store: ip6,\r\n        };\r\n    }\r\n\r\n    const onLogout = () => {\r\n        if (socket) socket.emit(\"logout\", access.token);\r\n        setServer({\r\n            status: status,\r\n            serverversion: serverversion,\r\n            servertime: servertime,\r\n            access: {\r\n                allow: false,\r\n                reason: 'logged out',\r\n                token: null,\r\n            },\r\n            externalip: externalip,\r\n            publicKey: publicKey,\r\n        });\r\n    };\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpenTT(false);\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpenTT(true);\r\n    };\r\n\r\n    const handleTooltipClose2 = () => {\r\n        setOpenTT2(false);\r\n    };\r\n\r\n    const handleTooltipOpen2 = () => {\r\n        setOpenTT2(true);\r\n    };\r\n\r\n    const handleTooltipClose3 = () => {\r\n        setOpenTT3(false);\r\n    };\r\n\r\n    const handleTooltipOpen3 = () => {\r\n        setOpenTT3(true);\r\n    };\r\n\r\n    const handleCloseDialog = async (e) => {\r\n        const last = e.target.parentElement.id;\r\n        setOpenDialog(false);\r\n\r\n        // Remove shown message from array\r\n        const newMessages = messages.slice(1, messages.length);\r\n        setMessages(newMessages);\r\n\r\n        if (socket) socket.emit(\"confirm-message\", last, access.token);\r\n\r\n        setLastMsg(last);\r\n    };\r\n\r\n    const sleep = (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (messages.length > 0) {\r\n            const msg = messages[0];\r\n            if (msg.bbvNew) setLatestVersion(msg.bbvNew);\r\n\r\n            // Only show message in case it matches current version, major version, or any\r\n            if (msg.bbvReceive === 'any' || bbv.startsWith(msg.bbvReceive)) {\r\n\r\n                // Check if the message contains a new version number, and if so, if BB is already on the new version\r\n                let alreadyUpdated = msg.bbvNew ? bbv >= msg.bbvNew : false;\r\n\r\n                // If already on the latest version, don't show the message\r\n                if (!alreadyUpdated) {\r\n                    if (msg.dialogWidth === null) {\r\n                        const textLength = msg.message.length;\r\n                        if (textLength < 400) setMaxWidth('sm');\r\n                        else if (textLength < 800) setMaxWidth('md');\r\n                        else if (textLength < 3000) setMaxWidth('lg');\r\n                        else setMaxWidth('xl');\r\n                    } else {\r\n                        setMaxWidth(msg.dialogWidth);\r\n                    }\r\n\r\n                    const newDialogMsg = {\r\n                        number: msg.number,\r\n                        title: msg.title,\r\n                        message: msg.message,\r\n                        width: msg.dialogWidth,\r\n                        lock: msg.lock,\r\n                        updated: alreadyUpdated,\r\n                    }\r\n\r\n                    setDialog(newDialogMsg);\r\n                    setOpenDialog(true);\r\n                } else {\r\n                    if (socket) socket.emit(\"confirm-message\", msg.number, access.token);\r\n                    // Remove shown message from array\r\n                    const newMessages = messages.slice(1, messages.length);\r\n                    setMessages(newMessages);\r\n                }\r\n            } else {\r\n                if (socket) socket.emit(\"confirm-message\", msg.number, access.token);\r\n                // Remove message from array\r\n                const newMessages = messages.slice(1, messages.length);\r\n                setMessages(newMessages);\r\n            }\r\n        } else {\r\n            setOpenDialog(false);\r\n        }\r\n    }, [messages]);\r\n\r\n    async function getMessages() {\r\n        if (socket) socket.emit(\"get-messages\", access.token);\r\n\r\n        if (checkNow.current) {\r\n            setcheckIconColor('#ff9800');\r\n            setTimeout(() => {\r\n                setcheckIconColor('#fff');\r\n            }, 1500);\r\n        }\r\n\r\n        checkNow.current = false;\r\n    }\r\n\r\n    return (<ThemeProvider theme={theme}>\r\n        {!outdated ? (\r\n            <React.Fragment>\r\n                <Backdrop className={classes.backdrop} open={openBD}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n                <Dialog\r\n                    open={openDialog}\r\n                    fullWidth={true}\r\n                    maxWidth={maxWidth}\r\n                >\r\n                    <DialogTitle id=\"dialog-title\">{dialog.title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"dialog-description\">\r\n                            <ReactMarkdown linkTarget=\"_blank\">\r\n                                {dialog.message}\r\n                            </ReactMarkdown>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" id={dialog.number} onClick={handleCloseDialog} color=\"secondary\" disabled={dialog.lock}>\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                    <CssBaseline />\r\n                    <AppBar position=\"relative\" className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <img src=\"/logo192.png\" alt=\"Balance Bot Logo\" className={classes.logo} />\r\n                                <Grid container direction=\"row\" alignItems=\"center\" nowrap=\"true\">\r\n                                    <Grid item xs zeroMinWidth>\r\n                                        <Box mt={1.5}>\r\n                                            <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                                                Balance Bot\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        <Box mt={-1} style={{ color: '#959FD6' }}>\r\n                                            <Typography variant=\"caption\" color=\"inherit\" noWrap>\r\n                                                v{version}\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                    <Hidden xsDown>\r\n                                <FlexToolbar wdt={flexWidthDown} update={update} logout={access && access.token} onLogout={onLogout} badge={badge} openDrawer={openDrawer} handleUpdateOpen={handleUpdateOpen} checkForUpdate={checkForUpdate} checkIconColor={checkIconColor} />\r\n                                    </Hidden>\r\n                                    <Hidden smUp>\r\n                                <FlexToolbar wdt={flexWidthUp} update={update} logout={access && access.token} onLogout={onLogout} badge={badge} openDrawer={openDrawer} handleUpdateOpen={handleUpdateOpen} checkForUpdate={checkForUpdate} checkIconColor={checkIconColor} />\r\n                                    </Hidden>\r\n                                </Grid>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer\r\n                        className={classes.drawer}\r\n                        anchor=\"right\" open={menuState} onClose={handleCancel}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                    >\r\n                        <Toolbar />\r\n                        <div style={{ padding: 20 }}>\r\n                            <Grid container spacing={2}>\r\n                                {(badge === 'true') && (\r\n                                    <Alert severity=\"error\">Configure and start your Telegram bot when enabling login or allowing temporary access from other IP addresses</Alert>\r\n                                )}\r\n                                <Grid item xs={10}>\r\n                                    <Typography variant=\"h4\">\r\n                                        General Settings\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                                        <HtmlTooltip\r\n                                            interactive\r\n                                            title={\r\n                                                <React.Fragment>\r\n                                                    <Box m={2}>\r\n                                                        <div><b>{\"Server timezone adjustment\"}</b></div>\r\n                                                        <div>{\"If you're hosting Balance Bot in the cloud, and the server's timezone is different from your local timezone, you can use this setting to adjust for that so that timestamps for orders and other events are provided in your local timezone. This setting will be applied to all your individual bots.\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div><b>{\"Telegram Bot\"}</b></div>\r\n                                                        <div>{\"You can receive notifications from Bot Manager and your bot(s) on Telegram. To do so, take the following steps:\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div>{\"1. Create a Telegram bot by sending '/newbot' to the BotFather (Telegram's uber bot): \"}<Link href=\"https://t.me/botfather\" target=\"_blank\" rel=\"noopener\" color=\"secondary\">https://t.me/botfather</Link></div>\r\n                                                        <div>{\"2. Answer BotFather's questions, i.e. pick a name and a username for your bot\"}</div>\r\n                                                        <div>{\"3. Copy the token provided by BotFather and paste it here in the settings\"}</div>\r\n                                                        <div>{\"4. Enter your personal Telegram username (your name on Telegram preceded by @, NOT the username for your Telegram bot) here in the settings\"}</div>\r\n                                                        <div>{\"5. Open your Telegram bot using the link provided by BotFather: \"}<Link href=\"#\" color=\"secondary\">t.me/[botname]</Link></div>\r\n                                                        <div>{\"6. Tap the 'start' button at the bottom, or type '/start' for further instructions\"}</div>\r\n                                                    </Box>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                            onClose={handleTooltipClose}\r\n                                            open={openTT}\r\n                                            disableFocusListener\r\n                                            disableHoverListener\r\n                                            disableTouchListener\r\n                                        >\r\n                                            <IconButton onClick={openTT ? handleTooltipClose : handleTooltipOpen}>\r\n                                                <InfoOutlinedIcon color=\"secondary\" />\r\n                                            </IconButton>\r\n                                        </HtmlTooltip>\r\n                                    </ClickAwayListener>\r\n                                    <Grid item xs={1}></Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <FormControl>\r\n                                        <InputLabel id=\"server-timezone\">Adjust for server timezone</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"server-timezone\"\r\n                                            value={timeshift}\r\n                                            onChange={onTimeshift}\r\n                                            className={classes.textinput}\r\n                                        >\r\n                                            <MenuItem value={12}>+12:00</MenuItem>\r\n                                            <MenuItem value={11}>+11:00</MenuItem>\r\n                                            <MenuItem value={10}>+10:00</MenuItem>\r\n                                            <MenuItem value={9}>+09:00</MenuItem>\r\n                                            <MenuItem value={8}>+08:00</MenuItem>\r\n                                            <MenuItem value={7}>+07:00</MenuItem>\r\n                                            <MenuItem value={6}>+06:00</MenuItem>\r\n                                            <MenuItem value={5}>+05:00</MenuItem>\r\n                                            <MenuItem value={4}>+04:00</MenuItem>\r\n                                            <MenuItem value={3}>+03:00</MenuItem>\r\n                                            <MenuItem value={2}>+02:00</MenuItem>\r\n                                            <MenuItem value={1}>+01:00</MenuItem>\r\n                                            <MenuItem value={0}>No adjustment</MenuItem>\r\n                                            <MenuItem value={-1}>-01:00</MenuItem>\r\n                                            <MenuItem value={-2}>-02:00</MenuItem>\r\n                                            <MenuItem value={-3}>-03:00</MenuItem>\r\n                                            <MenuItem value={-4}>-04:00</MenuItem>\r\n                                            <MenuItem value={-5}>-05:00</MenuItem>\r\n                                            <MenuItem value={-6}>-06:00</MenuItem>\r\n                                            <MenuItem value={-7}>-07:00</MenuItem>\r\n                                            <MenuItem value={-8}>-08:00</MenuItem>\r\n                                            <MenuItem value={-9}>-09:00</MenuItem>\r\n                                            <MenuItem value={-10}>-10:00</MenuItem>\r\n                                            <MenuItem value={-11}>-11:00</MenuItem>\r\n                                            <MenuItem value={-12}>-12:00</MenuItem>\r\n                                        </Select>\r\n                                        <FormHelperText>Current server time: {currenttime} - Adjusted server time: {newtime}</FormHelperText>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        id=\"telegram-token\"\r\n                                        name=\"telegram-token\"\r\n                                        label=\"Telegram Token\"\r\n                                        helperText=\"Token for your Telegram bot as provided by BotFather\"\r\n                                        type=\"password\"\r\n                                        value={telegramToken}\r\n                                        onChange={onTelegramToken}\r\n                                        className={classes.textinput}\r\n                                        autoComplete='off'\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        id=\"telegram-username\"\r\n                                        name=\"telegram-username\"\r\n                                        label=\"Telegram Username\"\r\n                                        helperText=\"Your Telegram username\"\r\n                                        value={telegramUsername}\r\n                                        onChange={onTelegramUsername}\r\n                                        className={classes.textinput}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <Typography variant=\"h4\">\r\n                                        Security Settings\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <ClickAwayListener onClickAway={handleTooltipClose2}>\r\n                                        <HtmlTooltip\r\n                                            interactive\r\n                                            title={\r\n                                                <React.Fragment>\r\n                                                    <Box m={2}>\r\n                                                        <div><b>{\"Security Settings\"}</b></div>\r\n                                                        <div>{\"If you're running Balance Bot in the cloud, it is highly recommended to only allow access from selected IP addresses (like your home IP address). Alternatively, or additionally, you may want to require login before getting access. You should use at least one of these options to prevent others from accessing your Balance Bot deployment.\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div><b>{\"Require login to access\"}</b></div>\r\n                                                        <div>{\"Check this option to require logging in using a username and password. For improved security, after logging in, your session will expire after 60 minutes. Optionally, you can activate Two Factor Authentication (2FA) through your Telegram bot (requires Telegram configuration, see General Settings above).\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div><b>{\"Enable IP whitelist\"}</b></div>\r\n                                                        <div>{\"Check this option to allow access to Balance Bot from selected IP addresses only, and add your trusted IP address(es) to the IP whitelist. By default, your current IP address is added to the IP whitelist when enabling the option, to prevent you from being locked out.\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div><b>{\"Allow temporary access\"}</b></div>\r\n                                                        <div>{\"There may be occassions when you want to access Balance Bot from an IP address that is not whitelisted. By checking the temporary access option, if you're trying to access Balance Bot from a non-whitelisted IP address, you will receive a message in your Telegram Bot and you can approve temporary access from that IP address (requires Telegram configuration, see General Settings above). If you have login enabled, you will be asked for your username and password instead.\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div>{\"Note: for security reasons, it is NOT recommended to access Balance Bot over public wifi networks.\"}</div>\r\n                                                    </Box>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                            onClose={handleTooltipClose2}\r\n                                            open={openTT2}\r\n                                            disableFocusListener\r\n                                            disableHoverListener\r\n                                            disableTouchListener\r\n                                        >\r\n                                            <IconButton onClick={openTT2 ? handleTooltipClose2 : handleTooltipOpen2}>\r\n                                                <InfoOutlinedIcon color=\"secondary\" />\r\n                                            </IconButton>\r\n                                        </HtmlTooltip>\r\n                                    </ClickAwayListener>\r\n                                    <Grid item xs={1}></Grid>\r\n                                </Grid>\r\n                                <Box pl={1} mt={-2}>\r\n                                    <Typography variant=\"overline\" color=\"secondary\">\r\n                                        For security reasons, don't use public wifi networks\r\n                                    </Typography>\r\n                                </Box>\r\n                                <Grid item xs={12}>\r\n                                        {(telegramToken === '' || telegramUsername === '' || !telegramChatId) && !loginRequired ? (\r\n                                            <LightTooltip title=\"Requires Telegram bot to be set up and started\">\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox color=\"secondary\" name=\"login-required\" disabled={true} checked={loginRequired} onChange={onLoginRequired} />}\r\n                                                    label=\"Require login to access\"\r\n                                                />\r\n                                            </LightTooltip>\r\n                                        ) : (\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox color=\"secondary\" name=\"login-required\" disabled={false} checked={loginRequired} onChange={onLoginRequired} />}\r\n                                                    label=\"Require login to access\"\r\n                                                />\r\n                                        )}\r\n                                </Grid>\r\n                                <Box p={2} display={loginRequired ? 'inline' : 'none'} bgcolor={mode === 'dark' ? \"#757575\" : \"#e0e0e0\"} width=\"100%\" >\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"bb-username\"\r\n                                            name=\"bb-username\"\r\n                                            label=\"Username\"\r\n                                            helperText=\"Your Balance Bot username\"\r\n                                            value={bbUsername}\r\n                                            onChange={onBbUsername}\r\n                                            className={classes.textinput}\r\n                                            disabled={!loginRequired}\r\n                                            autoComplete='off'\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"bb-password\"\r\n                                            name=\"bb-password\"\r\n                                            label=\"Password\"\r\n                                            helperText=\"Your Balance Bot password\"\r\n                                            type=\"password\"\r\n                                            value={bbPassword}\r\n                                            onChange={onBbPassword}\r\n                                            className={classes.textinput}\r\n                                            disabled={!loginRequired}\r\n                                            autoComplete='off'\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {(telegramToken === '' || telegramUsername === '' || !telegramChatId) && !f2aRequired ? (\r\n                                            <LightTooltip title=\"Requires Telegram bot to be set up and started\">\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox color=\"secondary\" name=\"f2a-required\" disabled={true} checked={f2aRequired} onChange={onF2aRequired} />}\r\n                                                    label=\"Require 2FA through Telegram bot to log in\"\r\n                                                />\r\n                                            </LightTooltip>\r\n                                        ) : (\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"secondary\" name=\"f2a-required\" disabled={false} checked={f2aRequired} onChange={onF2aRequired} />}\r\n                                                label=\"Require 2FA through Telegram bot to log in\"\r\n                                            />\r\n                                        )}\r\n                                    </Grid>\r\n                                </Box>\r\n                                <Grid item xs={12}>\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox color=\"secondary\" name=\"whitelist-enabled\" checked={whitelistEnabled} onChange={onWhitelistEnabled} />}\r\n                                        label=\"Enable IP whitelist\"\r\n                                    />\r\n                                </Grid>\r\n                                <Box p={2} display={whitelistEnabled ? 'inline' : 'none'} bgcolor={mode === 'dark' ? \"#757575\" : \"#e0e0e0\"} width=\"100%\" >\r\n                                    <Grid item xs={12}>\r\n                                        <Typography variant=\"overline\" color=\"textSecondary\">\r\n                                            IP Whitelist\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <List dense={true}>\r\n                                            {whitelist.map((ip) => ip === normalizeIP(externalip).store ? (\r\n                                                <ListItem key={ip}>\r\n                                                    <ListItemText\r\n                                                        primary={normalizeIP(ip).show}\r\n                                                    />\r\n                                                    <ListItemSecondaryAction>\r\n                                                        <Button color=\"secondary\" edge=\"end\" size=\"small\" disableFocusRipple disableRipple disabled>\r\n                                                            Current IP\r\n                                                        </Button>\r\n                                                    </ListItemSecondaryAction>\r\n                                                </ListItem>\r\n                                            ) : (\r\n                                                <ListItem key={ip}>\r\n                                                    <ListItemText\r\n                                                        primary={normalizeIP(ip).show}\r\n                                                    />\r\n                                                    <ListItemSecondaryAction>\r\n                                                        <IconButton edge=\"end\" size=\"small\" onClick={() => deleteIP(ip)}>\r\n                                                            <DeleteIcon />\r\n                                                        </IconButton>\r\n                                                    </ListItemSecondaryAction>\r\n                                                </ListItem>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Grid>\r\n                                    <Grid item container justify=\"space-between\" xs={12}>\r\n                                        <Grid item xs={9}>\r\n                                            <TextField\r\n                                                id=\"new-ip\"\r\n                                                name=\"new-ip\"\r\n                                                label=\"IP Address\"\r\n                                                value={newIP}\r\n                                                onChange={onNewIP}\r\n                                                className={classes.textinput}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={1}>\r\n                                            <Fab size=\"small\" color=\"secondary\" onClick={addIP}>\r\n                                                <AddIcon />\r\n                                            </Fab>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            {(telegramToken === '' || telegramUsername === '' || !telegramChatId) && !temporaryAccessAllowed ? (\r\n                                                <LightTooltip title=\"Requires Telegram bot to be set up and started\">\r\n                                                    <FormControlLabel\r\n                                                        control={<Checkbox color=\"secondary\" name=\"temporary-access-allowed\" disabled={true} checked={temporaryAccessAllowed} onChange={onTemporaryAccessAllowed} />}\r\n                                                        label=\"Allow controlled temporary access from other IPs\"\r\n                                                        />\r\n                                                </LightTooltip>\r\n                                            ) : (\r\n                                                <FormControlLabel\r\n                                                    control={<Checkbox color=\"secondary\" name=\"temporary-access-allowed\" disabled={false} checked={temporaryAccessAllowed} onChange={onTemporaryAccessAllowed} />}\r\n                                                    label=\"Allow controlled temporary access from other IPs\"\r\n                                                />\r\n                                            )}\r\n                                    </Grid>\r\n                                </Box>\r\n                                <Grid item xs={3}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleCancel}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={3}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleSave}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid> \r\n                        <Grid container spacing={2}>\r\n                            <Box m={2} />\r\n                            <Divider style={{ width: '100%', background: 'black' }} />\r\n                                <Grid item xs={10}>\r\n                                    <Typography variant=\"h4\">\r\n                                        Download Files\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                                        <HtmlTooltip\r\n                                            interactive\r\n                                            title={\r\n                                                <React.Fragment>\r\n                                                    <Box m={2}>\r\n                                                        <div><b>{\"Download Backup\"}</b></div>\r\n                                                        <div>{\"You can download a backup of your configuration files. This helps to restore your bot(s) when you'd like to move your installation to another machine. Sensitive data (e.g. API keys) are stripped before downloading.\"}</div>\r\n                                                        <div>&nbsp;</div>\r\n                                                        <div><b>{\"Download Logs\"}</b></div>\r\n                                                        <div>{\"You can download the past days' log files. This could help understand / debug possible issues with your installation.\"}</div>\r\n                                                    </Box>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                            onClose={handleTooltipClose}\r\n                                            open={openTT3}\r\n                                            disableFocusListener\r\n                                            disableHoverListener\r\n                                            disableTouchListener\r\n                                        >\r\n                                            <IconButton onClick={openTT3 ? handleTooltipClose3 : handleTooltipOpen3}>\r\n                                                <InfoOutlinedIcon color=\"secondary\" />\r\n                                            </IconButton>\r\n                                        </HtmlTooltip>\r\n                                    </ClickAwayListener>\r\n                                <Grid item xs={1}></Grid>\r\n                                </Grid>\r\n                            <Box pl={1} mt={-2}>\r\n                                <Typography variant=\"overline\" color=\"secondary\">\r\n                                    Download configuration backup or log files\r\n                                </Typography>\r\n                            </Box>\r\n                                <Grid item xs={3}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => handleDownload('backup')}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Backup\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={3}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => handleDownload('logs')}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Logs\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid> \r\n                        </div>\r\n                    </Drawer>\r\n                    <main>\r\n                        <div className={classes.heroContent}>\r\n                            <Container maxWidth=\"sm\">\r\n                                <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                                    Bot Manager\r\n                                </Typography>\r\n                                <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\r\n                                    Create, start, stop &amp; delete your bots\r\n                                </Typography>\r\n                                <div className={classes.heroButtons}>\r\n                                    <Grid container spacing={2} justify=\"center\">\r\n                                        <Grid item>\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={handleAddBot}>\r\n                                                Add new bot\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </div>\r\n                            </Container>\r\n                        </div>\r\n                        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                            <Grid container spacing={4}>\r\n                                {bots && bots.length > 0 && bots.map((bot) => (\r\n                                    <BotCard key={bot.botID} bot={bot} mode={mode} callback={handleUpdate} />\r\n                                ))}\r\n                            </Grid>\r\n                            <Box mb={4} />\r\n                        </Container>\r\n                    </main>\r\n                    <div className={classes.bottomPush}>\r\n                        <footer className={classes.footer}>\r\n                            <Grid container alignItems=\"center\">\r\n                                <Grid container item xs={12} sm={6} md={3} alignItems=\"center\" justify=\"flex-start\">\r\n                                    <Grid item>\r\n                                        <FormControlLabel\r\n                                            onChange={handleDarkmode}\r\n                                            value={mode}\r\n                                            control={<CustomSwitch checked={mode === 'dark'} color=\"secondary\" />}\r\n                                            label={<Typography variant=\"button\"><Box color=\"#FFF\">Light</Box></Typography>}\r\n                                            labelPlacement=\"start\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <StyledButton disableRipple onClick={handleDarkmode}><Typography variant=\"button\">\r\n                                            <Box color=\"#FFF\">Dark</Box>\r\n                                        </Typography></StyledButton>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Hidden xsDown>\r\n                                    <Grid item xs={false} sm={6} md={6}>\r\n                                        <Copyright />\r\n                                    </Grid>\r\n                                    <Hidden xsDown>\r\n                                        <Grid item xs={false} md={3}></Grid>\r\n                                    </Hidden>\r\n                                </Hidden>\r\n                            </Grid>\r\n                        </footer>\r\n                    </div>\r\n                    <Dialog open={open} onClose={handleClose}>\r\n                        <DialogTitle>Confirm Delete</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                <Typography color=\"textPrimary\">\r\n                                    Warning: your bot, its configuration, and all its data will be deleted. Enter the bot name to confirm deletion: <b>{deleteBot.botname}</b>\r\n                                </Typography>\r\n                            </DialogContentText>\r\n                            <TextField\r\n                                autoFocus\r\n                                color={(mode === 'light') ? \"primary\" : \"secondary\"}\r\n                                margin=\"dense\"\r\n                                id=\"botname\"\r\n                                label=\"Bot name\"\r\n                                type=\"text\"\r\n                                value={input}\r\n                                onChange={onInput}\r\n                                fullWidth\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button variant=\"contained\" onClick={handleClose} color={(mode === 'light') ? \"primary\" : \"secondary\"}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button variant=\"contained\" onClick={confirmDelete} color={(mode === 'light') ? \"primary\" : \"secondary\"}>\r\n                                Delete bot\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                <Dialog open={openUpdate} onClose={handleUpdateClose}>\r\n                    {validInstallation ? (\r\n                        <>\r\n                            <DialogTitle>Confirm Update</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    <Typography color=\"textPrimary\">\r\n                                        Do you want to update to the latest version? Balance Bot will be unavailable until the update has completed. This may take a few minutes. Just wait for the Bot Manager to reappear.\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button variant=\"contained\" onClick={handleUpdateClose} color={(mode === 'light') ? \"primary\" : \"secondary\"}>\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button variant=\"contained\" onClick={confirmBbUpdate} color={(mode === 'light') ? \"primary\" : \"secondary\"}>\r\n                                    Update\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <DialogTitle>Manual Update Required</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    <Typography color=\"textPrimary\">\r\n                                        Your installation does not support updating from the browser. Please perform a manual update.\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                                <DialogContentText>\r\n                                    <Typography color=\"textPrimary\">\r\n                                        Possible causes:\r\n                                        <ol>\r\n                                            <li>You haven't installed BB using the official installer</li>\r\n                                            <li>You're running BB in a Docker container</li>\r\n                                        </ol>\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button variant=\"contained\" onClick={handleUpdateClose} color={(mode === 'light') ? \"primary\" : \"secondary\"}>\r\n                                    OK\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </>\r\n                    )}\r\n                </Dialog>\r\n                </React.Fragment>\r\n            ) : (\r\n                <Dialog\r\n                    open={true}\r\n                    fullWidth={true}\r\n                    maxWidth={'sm'}\r\n                >\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <Typography variant=\"overline\" color=\"secondary\">\r\n                                New version has been installed\r\n                            </Typography>\r\n                            <DialogContentText>\r\n                            </DialogContentText>\r\n                            <Typography variant=\"overline\" color=\"textPrimary\">\r\n                                Please refresh the browser window to load the latest version\r\n                            </Typography>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" onClick={handleRefresh} color=\"secondary\">\r\n                            Refresh\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            )\r\n        }\r\n    </ThemeProvider>\r\n    )\r\n}\r\n\r\nconst FlexToolbar = (props) => {\r\n    const { wdt, update, logout, onLogout, badge, openDrawer, handleUpdateOpen, checkForUpdate, checkIconColor } = props;\r\n\r\n    return (\r\n        <Grid item xs container direction=\"row\" alignItems=\"center\" justify=\"flex-end\" style={{ maxWidth: wdt }}>\r\n            {(update) ? (\r\n                <Hidden xsDown>\r\n                    <Grid item style={{ width: '130px' }}>\r\n                        <Chip onClick={handleUpdateOpen} label='Update Available' style={{ backgroundColor: '#959FD6', color: 'white' }} />\r\n                    </Grid>\r\n                </Hidden>\r\n            ) : (\r\n                <Hidden xsDown>\r\n                    <Grid item style={{ width: '40px' }}>\r\n                        <LightTooltip title=\"Check for updates\">\r\n                            <IconButton onClick={checkForUpdate}>\r\n                                <AutorenewIcon style={{ color: checkIconColor }} />\r\n                            </IconButton>\r\n                        </LightTooltip>\r\n                    </Grid>\r\n                </Hidden>\r\n            )}\r\n            <Grid item>\r\n                <LightTooltip title=\"Settings\">\r\n                    <IconButton onClick={openDrawer}>\r\n                        {(badge === 'false') ? (\r\n                            <MenuIcon style={{ color: '#fff' }} />\r\n                        ) : (\r\n                            <Badge badgeContent={'!'} color=\"secondary\">\r\n                                <MenuIcon style={{ color: '#fff' }} />\r\n                            </Badge>\r\n                        )}\r\n                    </IconButton>\r\n                </LightTooltip>\r\n            </Grid>\r\n            {(logout) && (\r\n                <Grid item style={{ width: '48px' }}>\r\n                    <LightTooltip title=\"Logout\">\r\n                        <IconButton onClick={onLogout}>\r\n                            <ExitToAppIcon style={{ color: '#ffffff' }} />\r\n                        </IconButton>\r\n                    </LightTooltip>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n}","import React, { useContext, useState, useEffect } from 'react';\r\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link2 from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useLocalStore } from \"../services/LocalStoreService\";\r\nimport { ServerContext } from '../context/ServerContext';\r\nimport { useSnackbar } from 'notistack';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport pckg2 from '../version2.json';\r\nimport { socket } from '../context/SocketContext';\r\nimport { Crypt } from 'hybrid-crypto-js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    logo: {\r\n        maxWidth: 60,\r\n        padding: 10,\r\n    },\r\n    content: {\r\n        justify: \"flex-start\",\r\n        alignItems: \"flex-start\",\r\n        flexGrow: 1,\r\n        padding: theme.spacing(2),\r\n    },\r\n    footer: {\r\n        marginTop: 'auto',\r\n        backgroundColor: '#000000',\r\n    },\r\n    bottomPush: {\r\n        position: \"fixed\",\r\n        width: '100%',\r\n        bottom: 0,\r\n        paddingBottom: 0,\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n}));\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Box color=\"#FFF\" height={54} p={2}>\r\n            <Typography variant=\"body2\" align=\"center\">\r\n                {'Copyright © '}\r\n                <Link2 style={{ color: '#ffffff', textDecoration: 'none' }} href=\"https://hodlerhacks.com/\" target=\"_blank\" rel=\"noopener\">\r\n                    hodlerhacks.com\r\n                </Link2>{' '}\r\n                {new Date().getFullYear()}\r\n            </Typography>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default function Public() {\r\n    const version = pckg2.version;\r\n\r\n    const mode = useLocalStore('mode', 'light')[0];\r\n    const { status, access, publicKey } = useContext(ServerContext)[0];\r\n    const [loginNow, setLoginNow] = useState(false);\r\n    const [accessMsg, setAccessMsg] = useState('initial state');\r\n    const [serverDown, setServerDown] = useState(false);\r\n    const [usernameProvided, setUsernameProvided] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const getUsername = () => {\r\n        const pathname = window.location.pathname;\r\n        const result = pathname.match(/user\\/(\\w{3,})/);\r\n\r\n        if (result)\r\n            return result[1];\r\n        else\r\n            return '';\r\n    }\r\n\r\n    let crypt = new Crypt({\r\n        md: 'sha256',\r\n        rsaStandard: 'RSA-OAEP',\r\n    });\r\n\r\n    useEffect(() => {\r\n        document.title = `BB | Bot Dashboard`;\r\n\r\n        let user = getUsername();\r\n\r\n        if (user) {\r\n            setUsername(user);\r\n            setUsernameProvided(true);\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (status === 'disconnected')\r\n            // If status remains in disconnected state for too long, the server is down\r\n            setTimeout(() => {\r\n                if (status === 'disconnected') setServerDown(true);\r\n            }, 5000);\r\n        else\r\n            setServerDown(false);\r\n\r\n        return () => {\r\n        }\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        if (access) {\r\n            setLoginNow(false);\r\n            setServerDown(false);\r\n            if (access.allow === true) {\r\n                setAccessMsg('');\r\n            } else if (access.allow === false && access.reason === 'login required') {\r\n                setAccessMsg(\"Please log in\");\r\n                setLoginNow(true);\r\n            } else if (access.allow === false && access.reason === '2FA required') {\r\n                setAccessMsg(\"Add your client's IP address to the IP whitelist, or temporarily allow access through your Telegram bot\");\r\n            } else if (access.allow === false && access.reason === 'temporary access not allowed') {\r\n                setAccessMsg(\"Add your client's IP address to the IP whitelist\");\r\n            } else if (access.allow === false && access.reason === 'access timeout') {\r\n                handleRefresh();\r\n            } else if (access.allow === false && access.reason === 'temporary access timeout') {\r\n                setAccessMsg(\"Your temporary access has expired\");\r\n            } else if (access.allow === false && access.reason === '2FA login required') {\r\n                setAccessMsg(\"2FA required - approve login through your Telegram bot\");\r\n            } else if (access.allow === false && access.reason === 'invalid credentials') {\r\n                setAccessMsg(\"Incorrect username or password - please try again\");\r\n                setLoginNow(true);\r\n            } else if (access.allow === false && access.reason === '2FA login rejected') {\r\n                setAccessMsg(\"2FA login was rejected\");\r\n            } else if (access.allow === false && access.reason === 'temporary access rejected') {\r\n                setAccessMsg(\"Temporary access was rejected\");\r\n            } else if (access.allow === false && access.reason === 'logged out') {\r\n                handleRefresh();\r\n            } else if (access.allow === false && access.reason === 'initial state') {\r\n                setAccessMsg(\"initial state\");\r\n                // If access.reason remains in intial state for too long, the server is down\r\n                setTimeout(() => {\r\n                    if (access.reason === 'initial state') setServerDown(true);\r\n                }, 4000);\r\n            } else if (access.allow === false && access.reason === 'reload') {\r\n                handleRefresh();\r\n            }\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, [access]);\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: mode\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    const onLoginInput = (e) => {\r\n        if (e.target.id === 'username') setUsername(e.target.value);\r\n        if (e.target.id === 'password') setPassword(e.target.value);\r\n    }\r\n\r\n    const onSignIn = () => {\r\n        const timestamp = new Date().getTime();\r\n\r\n        if (socket) socket.emit(\"login\", {\r\n            username: username,\r\n            password: crypt.encrypt(publicKey, `${password}@${timestamp}`),\r\n        });\r\n    }\r\n\r\n    const handleRefresh = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const action = key => (\r\n        <React.Fragment>\r\n            <Button\r\n                style={{\r\n                    color: '#bbbbbb',\r\n                }}\r\n                onClick={() => { closeSnackbar(key) }}>\r\n                Dismiss\r\n            </Button>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const handleForgotPassword = () => {\r\n        if (socket) socket.emit(\"reset-password\");\r\n        enqueueSnackbar('See your Telegram bot to reset password', {\r\n            variant: 'success',\r\n            autoHideDuration: 8000,\r\n            action,\r\n        });\r\n    }\r\n\r\n    return (<ThemeProvider theme={theme}>\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <img src=\"/logo192.png\" alt=\"Balance Bot Logo\" className={classes.logo} />\r\n                        <Grid container direction=\"row\" alignItems=\"center\" nowrap=\"true\">\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Box mt={1.5}>\r\n                                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                                        Balance Bot\r\n                                    </Typography>\r\n                                </Box>\r\n                                <Box mt={-1} style={{ color: '#959FD6' }}>\r\n                                    <Typography variant=\"caption\" color=\"inherit\" noWrap>\r\n                                        v{version}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <main className={classes.content}>\r\n                    <Toolbar />\r\n                </main>\r\n            </div>\r\n            {/* </BrowserRouter> */}\r\n        </React.Fragment>\r\n        {status === 'disconnected' && accessMsg !== 'initial state' ? (\r\n            <Dialog\r\n                open={serverDown}\r\n                fullWidth = {true}\r\n                maxWidth = {'sm'}\r\n                    >\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"secondary\">\r\n                            The connection with the server has been lost\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"textPrimary\">\r\n                            Balance Bot may have stopped running\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={handleRefresh} color=\"secondary\">\r\n                        Retry\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            ) : !loginNow ? (accessMsg === 'initial state') ? (\r\n            <Dialog\r\n                open={serverDown}\r\n                fullWidth={true}\r\n                maxWidth={'sm'}\r\n            >\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"secondary\">\r\n                            Balance Bot seems to be down\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"textPrimary\">\r\n                            Please check your server and try again\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent >\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={handleRefresh} color=\"secondary\">\r\n                        Retry\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog >\r\n            ) : !access.allow && (\r\n            <Dialog\r\n                open={true}\r\n                fullWidth={true}\r\n                maxWidth={'sm'}\r\n            >\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"secondary\">\r\n                            Notification\r\n                        </Typography>\r\n                    </DialogContentText >\r\n                    <DialogContentText>\r\n                        <Typography variant=\"overline\" color=\"textPrimary\">\r\n                            {accessMsg}\r\n                        </Typography>\r\n                    </DialogContentText>\r\n                </DialogContent >\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" onClick={handleRefresh} color=\"secondary\">\r\n                        Back\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog >\r\n        ) : (\r\n            <React.Fragment>\r\n                <CssBaseline />\r\n                <Dialog\r\n                    open={true}\r\n                    fullWidth={true}\r\n                    maxWidth={'sm'}\r\n                >\r\n                    <DialogTitle>{accessMsg}</DialogTitle>\r\n                    <DialogContent>\r\n                        {!usernameProvided && (\r\n                                <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Username\"\r\n                                name=\"username\"\r\n                                onChange={onLoginInput}\r\n                            />\r\n                        )}\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            onChange={onLoginInput}\r\n                        />\r\n                        <Box m={3} />\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={onSignIn}\r\n                        >\r\n                            Log In\r\n                        </Button>\r\n                        <Box m={3} />\r\n                        <Button fullWidth onClick={handleForgotPassword} color=\"default\" style={{ fontSize: '10px' }}>\r\n                            Forgot password\r\n                        </Button>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </React.Fragment>\r\n        )\r\n        }\r\n        <div className={classes.bottomPush}>\r\n            <footer className={classes.footer}>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={false} sm={12} md={12}>\r\n                        <Copyright />\r\n                    </Grid>\r\n                </Grid>\r\n            </footer>\r\n        </div>\r\n    </ThemeProvider >\r\n    )\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport BotManager from './BotManager';\r\nimport Public from './Public';\r\nimport { ServerContext } from '../context/ServerContext';\r\n\r\nfunction Switch() {\r\n    const { status, access } = useContext(ServerContext)[0];\r\n    const [goPublic, setGoPublic] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setGoPublic(!access.allow || status === 'disconnected');\r\n\r\n        return () => {\r\n        }\r\n    }, [access, status]);\r\n\r\n    return (\r\n        <div>\r\n            {goPublic ? (\r\n                <Public />\r\n            ) : (\r\n                <BotManager />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Switch;","import { useEffect, useContext } from \"react\";\r\nimport { socket } from '../context/SocketContext';\r\nimport { ServerContext } from '../context/ServerContext';\r\nimport { MessageContext } from '../context/MessageContext';\r\nimport { ConfigurationContext } from '../context/ConfigurationContext';\r\nimport { BotsContext } from '../context/BotsContext';\r\nimport { useLocalStore } from \"../services/LocalStoreService\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport pckg2 from '../version2.json';\r\n\r\nexport default function SocketService() {\r\n    const version = pckg2.version;\r\n\r\n    const [{ status, serverversion, publicKey }, setServer] = useContext(ServerContext);\r\n    const setMessages = useContext(MessageContext)[1];\r\n    const setConfiguration = useContext(ConfigurationContext)[1];\r\n    const setBots = useContext(BotsContext)[1];\r\n    const [pubKey, setPubKey] = useLocalStore('publicKey', '');\r\n    const [uuid, setUuid] = useLocalStore('uuid', '');\r\n\r\n    useEffect(() => {\r\n        if (pubKey !== undefined && publicKey && publicKey.includes('-----BEGIN PUBLIC KEY-----')) {\r\n            if (publicKey !== pubKey) {\r\n                setPubKey(publicKey);\r\n                // This may happen because of a clean BB reinstall, which generates a new public key\r\n                // Or when running on a new client, or when local storage is cleared by the user\r\n                // Reload client, so the UUID gets encrypted with the new public key when establishing the websocket connection\r\n                // Do so after short delay, to make sure the public key gets stored\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 500);\r\n            } else {\r\n                // Reload page on server startup if new BB version has been installed, to make sure server and client are in sync\r\n                if (status === 'starting' && serverversion !== '0.0' && version !== serverversion) window.location.reload();\r\n                else if (status === 'starting')\r\n                    setServer(prevState => {\r\n                        return {\r\n                            ...prevState,\r\n                            status: 'connected'\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, [publicKey, pubKey, status, serverversion]);\r\n\r\n    useEffect(() => {\r\n        if (uuid === '') {\r\n            setUuid(uuidv4());\r\n            // Reload after short delay, to make sure the UUID gets stored\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 500);\r\n        }\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on(\"status\", (server) => {\r\n            setServer(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    ...server\r\n                }\r\n            });\r\n        });\r\n        socket.on(\"message\", (msg) => {\r\n            setMessages(msg);\r\n        });\r\n        socket.on(\"settings\", (config) => {\r\n            setConfiguration(config);\r\n        });\r\n        socket.on(\"bots\", (config) => {\r\n            setBots(config);\r\n        });\r\n        socket.on(\"disconnect\", data => {\r\n            setServer(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    status: 'disconnected',\r\n                }\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        }\r\n    }, []);\r\n\r\n    return (null);\r\n}","import './App.css';\nimport Switch from './components/Switch';\nimport SocketService from './services/SocketService';\nimport { ServerProvider } from './context/ServerContext';\nimport { MessageProvider } from './context/MessageContext';\nimport { ConfigurationProvider } from './context/ConfigurationContext';\nimport { BotsProvider } from './context/BotsContext';\nimport { CssBaseline } from \"@material-ui/core\";\nimport { SnackbarProvider } from 'notistack';\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5}>\n      <ServerProvider>\n        <MessageProvider>\n          <ConfigurationProvider>\n            <BotsProvider>\n              <SocketService />\n              <CssBaseline />\n              <Switch />\n            </BotsProvider>\n          </ConfigurationProvider>\n        </MessageProvider>\n      </ServerProvider>\n    </SnackbarProvider>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}